@model CommentsViewModel
@{
    var commentOptions = new AjaxOptions()
    {
        HttpMethod = "POST",
        UpdateTargetId = "commets-list",
        InsertionMode = InsertionMode.Replace

    };
}
@Comments(Model.Comments)
@if (Model.Comment.IsDeletedGame == false)
{
    if (!User.IsInRole(RoleEnum.Administrator.ToString()) || !User.IsInRole(RoleEnum.Manager.ToString()))
    {
        <div id="newComment">
            @using (Ajax.BeginForm("newcomment", "comment", commentOptions))
            {
                @Html.AntiForgeryToken()

                @Html.HiddenFor(m => m.Comment.ParentCommentId)
                @Html.HiddenFor(m => m.Comment.GameId)
                @Html.HiddenFor(m => m.Comment.GameKey)
                @Html.EditorFor(m => m.Comment.Name)
                @Html.ValidationMessageFor(m => m.Comment.Name)
                <br>
                @Html.TextAreaFor(m => m.Comment.Body, new { cols = 21 })
                @Html.ValidationMessageFor(m => m.Comment.Body)
                <br>
                <input type="submit" value="@Resources.Add" />
            }
        </div>
    }
}
@helper Comments(IList<CommentViewModel> comments)
{
    <ul>
        @for (int i = 0; i < comments.Count; i++)
        {
            if (comments[i].IsDisabled == false || User.IsInRole(RoleEnum.Moderator.ToString()))
            {
                <li id="Id_@comments[i].Id" class="comment">
                    @if (comments[i].ParentCommentId != null)
                    {
                        <span>@comments[i].Name, <a href="#Id_@comments[i].ParentCommentId">@comments[i].ParentComment.Name</a>,</span>
                    }
                    else
                    {
                        <span>@comments[i].Name,</span>
                    }
                    <span>@Html.Raw(comments[i].Body)</span>
                    <a href="#newComment" id="Reply_@( comments[i].Id + "_" + comments[i].Name)">@Resources.Reply</a>
                    @if (comments.Count != 0)
                    {
                        @Comments(comments[i].Comments)
                    }

                    @if (User.IsInRole(RoleEnum.Moderator.ToString()))
                    {
                        if (comments[i].IsDisabled)
                        {
                            @Html.ActionLink("Restore", "ChangeCommentState", new { key = comments[i].Id })
                        }
                        else
                        {
                            @Html.ActionLink("Disable", "ChangeCommentState", new { key = comments[i].Id })
                        }
                    }
                </li>
            }
        }
    </ul>
}
<script>
    $(document).ready(function () {
        var reply = $("button[id^=Reply_]").on("click", setParentId);

        function setParentId(event) {
            var id = event.target.id.split('_')[1];
            var name = event.target.id.split('_')[2];
            $("#Comment_ParentCommentId").val(id);
            if ($("#Add_Comment_For_Author").length != 0) {
                $("#Add_Comment_For_Author").remove();
            }
            $("#Comment_Body").after("<div id='Add_Comment_For_Author'>Add comment for " +
                name +
                " <button onclick='cancelAuthorMethod()' type='button' id = 'Cancel_Author'>Cancel</button></div>");
        }

    });

    function cancelAuthorMethod() {
        $("#Comment_ParentCommentId").val('');
        $("#Add_Comment_For_Author").remove();
    }
</script>